// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-protocol.proto

#include "net-protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR DataFrame::DataFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_)*/0
  , /*decltype(_impl_.datatype_)*/0
  , /*decltype(_impl_.val_)*/0} {}
struct DataFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataFrameDefaultTypeInternal() {}
  union {
    DataFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataFrameDefaultTypeInternal _DataFrame_default_instance_;
PROTOBUF_CONSTEXPR DataPacket::DataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.chassis_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.num_sensors_)*/0} {}
struct DataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacketDefaultTypeInternal() {}
  union {
    DataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacketDefaultTypeInternal _DataPacket_default_instance_;
PROTOBUF_CONSTEXPR RawCommand::RawCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.all_sensors_)*/false
  , /*decltype(_impl_.sensor_num_)*/0u
  , /*decltype(_impl_.register_address_)*/0u
  , /*decltype(_impl_.data_)*/0u} {}
struct RawCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawCommandDefaultTypeInternal() {}
  union {
    RawCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawCommandDefaultTypeInternal _RawCommand_default_instance_;
PROTOBUF_CONSTEXPR DevModeValidation::DevModeValidation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valid_)*/false
  , /*decltype(_impl_.enable_)*/false} {}
struct DevModeValidationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DevModeValidationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DevModeValidationDefaultTypeInternal() {}
  union {
    DevModeValidation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DevModeValidationDefaultTypeInternal _DevModeValidation_default_instance_;
PROTOBUF_CONSTEXPR ConfigMessage::ConfigMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.datatype_)*/0u
  , /*decltype(_impl_.freq_)*/0u} {}
struct ConfigMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigMessageDefaultTypeInternal() {}
  union {
    ConfigMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigMessageDefaultTypeInternal _ConfigMessage_default_instance_;
PROTOBUF_CONSTEXPR LogicMessage::LogicMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_list_)*/{}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.type_)*/1} {}
struct LogicMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicMessageDefaultTypeInternal() {}
  union {
    LogicMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicMessageDefaultTypeInternal _LogicMessage_default_instance_;
PROTOBUF_CONSTEXPR LogicInterruptMessage::LogicInterruptMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_list_)*/{}
  , /*decltype(_impl_.type_)*/0u} {}
struct LogicInterruptMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicInterruptMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicInterruptMessageDefaultTypeInternal() {}
  union {
    LogicInterruptMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicInterruptMessageDefaultTypeInternal _LogicInterruptMessage_default_instance_;
PROTOBUF_CONSTEXPR WaveMessage::WaveMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.freq_)*/0
  , /*decltype(_impl_.amp_)*/0
  , /*decltype(_impl_.type_)*/0u} {}
struct WaveMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaveMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaveMessageDefaultTypeInternal() {}
  union {
    WaveMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaveMessageDefaultTypeInternal _WaveMessage_default_instance_;
PROTOBUF_CONSTEXPR CmdPacket::CmdPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.config_list_)*/{}
  , /*decltype(_impl_.logic_req_)*/{}
  , /*decltype(_impl_.wave_req_)*/{}
  , /*decltype(_impl_.logic_interrupt_req_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.raw_cmd_)*/nullptr
  , /*decltype(_impl_.dev_mode_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.datatype_)*/0u
  , /*decltype(_impl_.freq_)*/0u
  , /*decltype(_impl_.chassis_ident_)*/false
  , /*decltype(_impl_.closed_loop_)*/false
  , /*decltype(_impl_.num_sync_chassis_)*/0u
  , /*decltype(_impl_.cmd_)*/2} {}
struct CmdPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmdPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmdPacketDefaultTypeInternal() {}
  union {
    CmdPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmdPacketDefaultTypeInternal _CmdPacket_default_instance_;
PROTOBUF_CONSTEXPR SensorStatus::SensorStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_card_serial_num_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_serial_num_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.sensor_connected_)*/false} {}
struct SensorStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorStatusDefaultTypeInternal() {}
  union {
    SensorStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorStatusDefaultTypeInternal _SensorStatus_default_instance_;
PROTOBUF_CONSTEXPR SensorState::SensorState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.error_flags_)*/0u} {}
struct SensorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorStateDefaultTypeInternal() {}
  union {
    SensorState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorStateDefaultTypeInternal _SensorState_default_instance_;
PROTOBUF_CONSTEXPR SensorConfig::SensorConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_)*/0u
  , /*decltype(_impl_.datatype_)*/0u
  , /*decltype(_impl_.freq_)*/0u
  , /*decltype(_impl_.calibration_)*/0} {}
struct SensorConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorConfigDefaultTypeInternal() {}
  union {
    SensorConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorConfigDefaultTypeInternal _SensorConfig_default_instance_;
PROTOBUF_CONSTEXPR SensorLed::SensorLed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.blink_state_)*/0u
  , /*decltype(_impl_.color_)*/0u} {}
struct SensorLedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorLedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorLedDefaultTypeInternal() {}
  union {
    SensorLed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorLedDefaultTypeInternal _SensorLed_default_instance_;
PROTOBUF_CONSTEXPR SensorField::SensorField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.field_x_)*/0
  , /*decltype(_impl_.field_y_)*/0
  , /*decltype(_impl_.field_z_)*/0} {}
struct SensorFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorFieldDefaultTypeInternal() {}
  union {
    SensorField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorFieldDefaultTypeInternal _SensorField_default_instance_;
PROTOBUF_CONSTEXPR ChassisStatus::ChassisStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.closed_loop_)*/false} {}
struct ChassisStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChassisStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChassisStatusDefaultTypeInternal() {}
  union {
    ChassisStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChassisStatusDefaultTypeInternal _ChassisStatus_default_instance_;
PROTOBUF_CONSTEXPR SystemStatusMessage::SystemStatusMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.master_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_short_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_)*/0u
  , /*decltype(_impl_.total_)*/0u} {}
struct SystemStatusMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemStatusMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemStatusMessageDefaultTypeInternal() {}
  union {
    SystemStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemStatusMessageDefaultTypeInternal _SystemStatusMessage_default_instance_;
PROTOBUF_CONSTEXPR StatusPacket::StatusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_status_)*/{}
  , /*decltype(_impl_.sensor_config_)*/{}
  , /*decltype(_impl_.sensor_led_)*/{}
  , /*decltype(_impl_.sensor_state_)*/{}
  , /*decltype(_impl_.sensor_field_)*/{}
  , /*decltype(_impl_.chassis_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chassis_status_)*/nullptr
  , /*decltype(_impl_.system_status_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.num_sensors_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.status_)*/0} {}
struct StatusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusPacketDefaultTypeInternal() {}
  union {
    StatusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusPacketDefaultTypeInternal _StatusPacket_default_instance_;
static ::_pb::Metadata file_level_metadata_net_2dprotocol_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_net_2dprotocol_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_2dprotocol_2eproto = nullptr;

const uint32_t TableStruct_net_2dprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DataFrame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataFrame, _impl_.sensor_),
  PROTOBUF_FIELD_OFFSET(::DataFrame, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::DataFrame, _impl_.val_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DataPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataPacket, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::DataPacket, _impl_.chassis_name_),
  PROTOBUF_FIELD_OFFSET(::DataPacket, _impl_.num_sensors_),
  PROTOBUF_FIELD_OFFSET(::DataPacket, _impl_.data_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RawCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RawCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RawCommand, _impl_.all_sensors_),
  PROTOBUF_FIELD_OFFSET(::RawCommand, _impl_.sensor_num_),
  PROTOBUF_FIELD_OFFSET(::RawCommand, _impl_.register_address_),
  PROTOBUF_FIELD_OFFSET(::RawCommand, _impl_.data_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::DevModeValidation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DevModeValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DevModeValidation, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::DevModeValidation, _impl_.valid_),
  PROTOBUF_FIELD_OFFSET(::DevModeValidation, _impl_.enable_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ConfigMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigMessage, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::ConfigMessage, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::ConfigMessage, _impl_.freq_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::LogicMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::LogicMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogicMessage, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::LogicMessage, _impl_.sensor_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::LogicInterruptMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::LogicInterruptMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogicInterruptMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::LogicInterruptMessage, _impl_.sensor_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::WaveMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::WaveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WaveMessage, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::WaveMessage, _impl_.freq_),
  PROTOBUF_FIELD_OFFSET(::WaveMessage, _impl_.amp_),
  PROTOBUF_FIELD_OFFSET(::WaveMessage, _impl_.type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.freq_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.raw_cmd_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.config_list_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.dev_mode_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.logic_req_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.wave_req_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.chassis_ident_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.closed_loop_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.logic_interrupt_req_),
  PROTOBUF_FIELD_OFFSET(::CmdPacket, _impl_.num_sync_chassis_),
  9,
  3,
  4,
  5,
  1,
  0,
  ~0u,
  2,
  ~0u,
  ~0u,
  6,
  7,
  ~0u,
  8,
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _impl_.sensor_card_serial_num_),
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _impl_.sensor_version_),
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _impl_.sensor_connected_),
  PROTOBUF_FIELD_OFFSET(::SensorStatus, _impl_.sensor_serial_num_),
  3,
  0,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::SensorState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SensorState, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::SensorState, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::SensorState, _impl_.error_flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SensorConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SensorConfig, _impl_.sensor_),
  PROTOBUF_FIELD_OFFSET(::SensorConfig, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::SensorConfig, _impl_.freq_),
  PROTOBUF_FIELD_OFFSET(::SensorConfig, _impl_.calibration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SensorLed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorLed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SensorLed, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::SensorLed, _impl_.blink_state_),
  PROTOBUF_FIELD_OFFSET(::SensorLed, _impl_.color_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SensorField, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SensorField, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::SensorField, _impl_.field_x_),
  PROTOBUF_FIELD_OFFSET(::SensorField, _impl_.field_y_),
  PROTOBUF_FIELD_OFFSET(::SensorField, _impl_.field_z_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ChassisStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChassisStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChassisStatus, _impl_.closed_loop_),
  0,
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::SystemStatusMessage, _impl_.serial_short_),
  4,
  5,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.chassis_name_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.num_sensors_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.sensor_status_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.progress_msg_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.sensor_config_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.sensor_led_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.sensor_state_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.sensor_field_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.chassis_status_),
  PROTOBUF_FIELD_OFFSET(::StatusPacket, _impl_.system_status_),
  0,
  5,
  6,
  ~0u,
  1,
  7,
  2,
  ~0u,
  8,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::DataFrame)},
  { 12, 22, -1, sizeof(::DataPacket)},
  { 26, 36, -1, sizeof(::RawCommand)},
  { 40, 49, -1, sizeof(::DevModeValidation)},
  { 52, 61, -1, sizeof(::ConfigMessage)},
  { 64, 73, -1, sizeof(::LogicMessage)},
  { 76, 84, -1, sizeof(::LogicInterruptMessage)},
  { 86, 96, -1, sizeof(::WaveMessage)},
  { 100, 120, -1, sizeof(::CmdPacket)},
  { 134, 145, -1, sizeof(::SensorStatus)},
  { 150, 159, -1, sizeof(::SensorState)},
  { 162, 172, -1, sizeof(::SensorConfig)},
  { 176, 185, -1, sizeof(::SensorLed)},
  { 188, 198, -1, sizeof(::SensorField)},
  { 202, 209, -1, sizeof(::ChassisStatus)},
  { 210, 222, -1, sizeof(::SystemStatusMessage)},
  { 228, 248, -1, sizeof(::StatusPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_DataFrame_default_instance_._instance,
  &::_DataPacket_default_instance_._instance,
  &::_RawCommand_default_instance_._instance,
  &::_DevModeValidation_default_instance_._instance,
  &::_ConfigMessage_default_instance_._instance,
  &::_LogicMessage_default_instance_._instance,
  &::_LogicInterruptMessage_default_instance_._instance,
  &::_WaveMessage_default_instance_._instance,
  &::_CmdPacket_default_instance_._instance,
  &::_SensorStatus_default_instance_._instance,
  &::_SensorState_default_instance_._instance,
  &::_SensorConfig_default_instance_._instance,
  &::_SensorLed_default_instance_._instance,
  &::_SensorField_default_instance_._instance,
  &::_ChassisStatus_default_instance_._instance,
  &::_SystemStatusMessage_default_instance_._instance,
  &::_StatusPacket_default_instance_._instance,
};

const char descriptor_table_protodef_net_2dprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022net-protocol.proto\":\n\tDataFrame\022\016\n\006sen"
  "sor\030\001 \002(\005\022\020\n\010datatype\030\002 \002(\005\022\013\n\003val\030\003 \002(\005"
  "\"d\n\nDataPacket\022\021\n\ttimestamp\030\001 \002(\r\022\024\n\014cha"
  "ssis_name\030\002 \002(\t\022\023\n\013num_sensors\030\003 \002(\005\022\030\n\004"
  "data\030\004 \003(\0132\n.DataFrame\"]\n\nRawCommand\022\023\n\013"
  "all_sensors\030\001 \002(\010\022\022\n\nsensor_num\030\002 \002(\r\022\030\n"
  "\020register_address\030\003 \002(\r\022\014\n\004data\030\004 \002(\r\"D\n"
  "\021DevModeValidation\022\020\n\010password\030\001 \001(\t\022\r\n\005"
  "valid\030\002 \001(\010\022\016\n\006enable\030\003 \001(\010\"B\n\rConfigMes"
  "sage\022\021\n\tsensor_id\030\001 \001(\r\022\020\n\010datatype\030\002 \001("
  "\r\022\014\n\004freq\030\003 \001(\r\"\255\002\n\014LogicMessage\022\021\n\tsens"
  "or_id\030\001 \001(\r\022)\n\004type\030\002 \001(\0162\033.LogicMessage"
  ".EnumLogicType\022\023\n\013sensor_list\030\003 \003(\r\"\311\001\n\r"
  "EnumLogicType\022\030\n\024LOGIC_SENSOR_RESTART\020\001\022"
  "\034\n\030LOGIC_SENSOR_COARSE_ZERO\020\002\022\024\n\020LOGIC_S"
  "ENSOR_OFF\020\003\022\025\n\021LOGIC_SENSOR_IDLE\020\004\022\032\n\026LO"
  "GIC_SENSOR_FINE_ZERO\020\005\022\032\n\026LOGIC_SENSOR_S"
  "TASIS_ON\020 \022\033\n\027LOGIC_SENSOR_STASIS_OFF\020!\""
  ":\n\025LogicInterruptMessage\022\014\n\004type\030\001 \001(\r\022\023"
  "\n\013sensor_list\030\002 \003(\r\"\201\001\n\013WaveMessage\022\021\n\ts"
  "ensor_id\030\001 \001(\r\022\014\n\004freq\030\002 \001(\002\022\013\n\003amp\030\003 \001("
  "\002\022\014\n\004type\030\004 \001(\r\"6\n\010WaveType\022\014\n\010WAVE_OFF\020"
  "\000\022\r\n\tWAVE_RAMP\020\001\022\r\n\tWAVE_SINE\020\002\"\350\006\n\tCmdP"
  "acket\022#\n\003cmd\030\001 \002(\0162\026.CmdPacket.EnumCmdTy"
  "pe\022\021\n\tsensor_id\030\002 \001(\r\022\020\n\010datatype\030\003 \001(\r\022"
  "\014\n\004freq\030\004 \001(\r\022\034\n\007raw_cmd\030\005 \001(\0132\013.RawComm"
  "and\022\013\n\003uri\030\006 \001(\t\022#\n\013config_list\030\007 \003(\0132\016."
  "ConfigMessage\022$\n\010dev_mode\030\010 \001(\0132\022.DevMod"
  "eValidation\022 \n\tlogic_req\030\t \003(\0132\r.LogicMe"
  "ssage\022\036\n\010wave_req\030\n \003(\0132\014.WaveMessage\022\025\n"
  "\rchassis_ident\030\013 \001(\010\022\023\n\013closed_loop\030\014 \001("
  "\010\0223\n\023logic_interrupt_req\030\r \003(\0132\026.LogicIn"
  "terruptMessage\022\030\n\020num_sync_chassis\030\016 \001(\r"
  "\"\317\003\n\013EnumCmdType\022\016\n\nSTATUS_REQ\020\002\022\017\n\013CONF"
  "IG_DATA\020\003\022\013\n\007RAW_CMD\020\004\022\020\n\014RAW_CMD_RESP\020\005"
  "\022\n\n\006DL_URI\020\006\022\016\n\nRESET_FPGA\020\007\022\n\n\006UPDATE\020\010"
  "\022\021\n\rUPDATE_COMMIT\020\t\022\025\n\021SENSOR_STATUS_REQ"
  "\020\n\022\025\n\021SENSOR_CONFIG_REQ\020\013\022\021\n\rFLASH_CHASS"
  "IS\020\014\022\021\n\rFLASH_SENSORS\020\r\022\n\n\006REBOOT\020\016\022\010\n\004S"
  "YNC\020\017\022\025\n\021ONE_TIME_READ_REQ\020\020\022\017\n\013CONFIG_L"
  "IST\020\021\022\020\n\014DEV_MODE_REQ\020\022\022\r\n\tLOGIC_REQ\020\023\022\014"
  "\n\010WAVE_REQ\020\024\022\r\n\tIDENT_REQ\020\025\022\023\n\017CLOSED_LO"
  "OP_REQ\020\026\022\025\n\021SYSTEM_STATUS_REQ\020\027\022\027\n\023LOGIC"
  "_INTERRUPT_REQ\020\030\022\020\n\014SYNC_CMD_REQ\020\031\022\036\n\032CO"
  "MPLETE_SYSTEM_STATUS_REQ\020\032\"\216\001\n\014SensorSta"
  "tus\022\021\n\tsensor_id\030\001 \002(\r\022\036\n\026sensor_card_se"
  "rial_num\030\002 \001(\t\022\026\n\016sensor_version\030\003 \001(\t\022\030"
  "\n\020sensor_connected\030\004 \001(\010\022\031\n\021sensor_seria"
  "l_num\030\005 \001(\t\"\240\002\n\013SensorState\022\021\n\tsensor_id"
  "\030\001 \001(\r\022)\n\005state\030\002 \001(\0162\032.SensorState.Enum"
  "StateType\022\023\n\013error_flags\030\003 \001(\r\"\275\001\n\rEnumS"
  "tateType\022\007\n\003OFF\020\000\022\010\n\004IDLE\020\001\022\t\n\005ERROR\020\002\022\016"
  "\n\nSOFT_ERROR\020\003\022\t\n\005READY\020\004\022\013\n\007RESTART\020\n\022\024"
  "\n\020RESTART_COMPLETE\020\013\022\017\n\013COARSE_ZERO\020\014\022\030\n"
  "\024COARSE_ZERO_COMPLETE\020\r\022\r\n\tFINE_ZERO\020\016\022\026"
  "\n\022FINE_ZERO_COMPLETE\020\017\"S\n\014SensorConfig\022\016"
  "\n\006sensor\030\001 \002(\r\022\020\n\010datatype\030\002 \002(\r\022\014\n\004freq"
  "\030\003 \002(\r\022\023\n\013calibration\030\004 \001(\002\"B\n\tSensorLed"
  "\022\021\n\tsensor_id\030\001 \001(\r\022\023\n\013blink_state\030\002 \001(\r"
  "\022\r\n\005color\030\003 \001(\r\"S\n\013SensorField\022\021\n\tsensor"
  "_id\030\001 \001(\r\022\017\n\007field_x\030\002 \001(\002\022\017\n\007field_y\030\003 "
  "\001(\002\022\017\n\007field_z\030\004 \001(\002\"$\n\rChassisStatus\022\023\n"
  "\013closed_loop\030\001 \001(\010\"x\n\023SystemStatusMessag"
  "e\022\013\n\003num\030\001 \001(\r\022\r\n\005total\030\002 \001(\r\022\017\n\007version"
  "\030\003 \001(\t\022\016\n\006master\030\004 \001(\t\022\016\n\006serial\030\005 \001(\t\022\024"
  "\n\014serial_short\030\006 \001(\t\"\237\006\n\014StatusPacket\022\024\n"
  "\014chassis_name\030\001 \002(\t\022*\n\004type\030\002 \002(\0162\034.Stat"
  "usPacket.EnumStatusType\022\023\n\013num_sensors\030\003"
  " \002(\r\022$\n\rsensor_status\030\004 \003(\0132\r.SensorStat"
  "us\022\017\n\007version\030\005 \002(\t\022\020\n\010progress\030\006 \001(\r\022\024\n"
  "\014progress_msg\030\007 \001(\t\022$\n\rsensor_config\030\010 \003"
  "(\0132\r.SensorConfig\022.\n\006status\030\t \002(\0162\036.Stat"
  "usPacket.EnumSystemStatus\022\036\n\nsensor_led\030"
  "\n \003(\0132\n.SensorLed\022\"\n\014sensor_state\030\013 \003(\0132"
  "\014.SensorState\022\"\n\014sensor_field\030\014 \003(\0132\014.Se"
  "nsorField\022&\n\016chassis_status\030\r \001(\0132\016.Chas"
  "sisStatus\022+\n\rsystem_status\030\016 \001(\0132\024.Syste"
  "mStatusMessage\"\263\001\n\016EnumStatusType\022\n\n\006STA"
  "TUS\020\000\022\014\n\010PROGRESS\020\001\022\021\n\rSENSOR_STATUS\020\002\022\021"
  "\n\rSENSOR_CONFIG\020\003\022\016\n\nSENSOR_LED\020\004\022\020\n\014SEN"
  "SOR_STATE\020\005\022\020\n\014SENSOR_FIELD\020\006\022\021\n\rSYSTEM_"
  "STATUS\020\007\022\032\n\026COMPLETE_SYSTEM_STATUS\020\010\"\217\001\n"
  "\020EnumSystemStatus\022\013\n\007STARTUP\020\000\022\014\n\010FLASHI"
  "NG\020\001\022\013\n\007RUNNING\020\002\022\026\n\022MENDER_UPDATE_FAIL\020"
  "\003\022\024\n\020FPGA_UPDATE_FAIL\020\004\022\022\n\016PENDING_COMMI"
  "T\020\005\022\021\n\rSTARTUP_ERROR\020\006"
  ;
static ::_pbi::once_flag descriptor_table_net_2dprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2dprotocol_2eproto = {
    false, false, 3422, descriptor_table_protodef_net_2dprotocol_2eproto,
    "net-protocol.proto",
    &descriptor_table_net_2dprotocol_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_net_2dprotocol_2eproto::offsets,
    file_level_metadata_net_2dprotocol_2eproto, file_level_enum_descriptors_net_2dprotocol_2eproto,
    file_level_service_descriptors_net_2dprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2dprotocol_2eproto_getter() {
  return &descriptor_table_net_2dprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2dprotocol_2eproto(&descriptor_table_net_2dprotocol_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicMessage_EnumLogicType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2dprotocol_2eproto);
  return file_level_enum_descriptors_net_2dprotocol_2eproto[0];
}
bool LogicMessage_EnumLogicType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_RESTART;
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_COARSE_ZERO;
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_OFF;
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_IDLE;
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_FINE_ZERO;
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_STASIS_ON;
constexpr LogicMessage_EnumLogicType LogicMessage::LOGIC_SENSOR_STASIS_OFF;
constexpr LogicMessage_EnumLogicType LogicMessage::EnumLogicType_MIN;
constexpr LogicMessage_EnumLogicType LogicMessage::EnumLogicType_MAX;
constexpr int LogicMessage::EnumLogicType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaveMessage_WaveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2dprotocol_2eproto);
  return file_level_enum_descriptors_net_2dprotocol_2eproto[1];
}
bool WaveMessage_WaveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WaveMessage_WaveType WaveMessage::WAVE_OFF;
constexpr WaveMessage_WaveType WaveMessage::WAVE_RAMP;
constexpr WaveMessage_WaveType WaveMessage::WAVE_SINE;
constexpr WaveMessage_WaveType WaveMessage::WaveType_MIN;
constexpr WaveMessage_WaveType WaveMessage::WaveType_MAX;
constexpr int WaveMessage::WaveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdPacket_EnumCmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2dprotocol_2eproto);
  return file_level_enum_descriptors_net_2dprotocol_2eproto[2];
}
bool CmdPacket_EnumCmdType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CmdPacket_EnumCmdType CmdPacket::STATUS_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::CONFIG_DATA;
constexpr CmdPacket_EnumCmdType CmdPacket::RAW_CMD;
constexpr CmdPacket_EnumCmdType CmdPacket::RAW_CMD_RESP;
constexpr CmdPacket_EnumCmdType CmdPacket::DL_URI;
constexpr CmdPacket_EnumCmdType CmdPacket::RESET_FPGA;
constexpr CmdPacket_EnumCmdType CmdPacket::UPDATE;
constexpr CmdPacket_EnumCmdType CmdPacket::UPDATE_COMMIT;
constexpr CmdPacket_EnumCmdType CmdPacket::SENSOR_STATUS_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::SENSOR_CONFIG_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::FLASH_CHASSIS;
constexpr CmdPacket_EnumCmdType CmdPacket::FLASH_SENSORS;
constexpr CmdPacket_EnumCmdType CmdPacket::REBOOT;
constexpr CmdPacket_EnumCmdType CmdPacket::SYNC;
constexpr CmdPacket_EnumCmdType CmdPacket::ONE_TIME_READ_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::CONFIG_LIST;
constexpr CmdPacket_EnumCmdType CmdPacket::DEV_MODE_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::LOGIC_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::WAVE_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::IDENT_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::CLOSED_LOOP_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::SYSTEM_STATUS_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::LOGIC_INTERRUPT_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::SYNC_CMD_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::COMPLETE_SYSTEM_STATUS_REQ;
constexpr CmdPacket_EnumCmdType CmdPacket::EnumCmdType_MIN;
constexpr CmdPacket_EnumCmdType CmdPacket::EnumCmdType_MAX;
constexpr int CmdPacket::EnumCmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorState_EnumStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2dprotocol_2eproto);
  return file_level_enum_descriptors_net_2dprotocol_2eproto[3];
}
bool SensorState_EnumStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorState_EnumStateType SensorState::OFF;
constexpr SensorState_EnumStateType SensorState::IDLE;
constexpr SensorState_EnumStateType SensorState::ERROR;
constexpr SensorState_EnumStateType SensorState::SOFT_ERROR;
constexpr SensorState_EnumStateType SensorState::READY;
constexpr SensorState_EnumStateType SensorState::RESTART;
constexpr SensorState_EnumStateType SensorState::RESTART_COMPLETE;
constexpr SensorState_EnumStateType SensorState::COARSE_ZERO;
constexpr SensorState_EnumStateType SensorState::COARSE_ZERO_COMPLETE;
constexpr SensorState_EnumStateType SensorState::FINE_ZERO;
constexpr SensorState_EnumStateType SensorState::FINE_ZERO_COMPLETE;
constexpr SensorState_EnumStateType SensorState::EnumStateType_MIN;
constexpr SensorState_EnumStateType SensorState::EnumStateType_MAX;
constexpr int SensorState::EnumStateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusPacket_EnumStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2dprotocol_2eproto);
  return file_level_enum_descriptors_net_2dprotocol_2eproto[4];
}
bool StatusPacket_EnumStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StatusPacket_EnumStatusType StatusPacket::STATUS;
constexpr StatusPacket_EnumStatusType StatusPacket::PROGRESS;
constexpr StatusPacket_EnumStatusType StatusPacket::SENSOR_STATUS;
constexpr StatusPacket_EnumStatusType StatusPacket::SENSOR_CONFIG;
constexpr StatusPacket_EnumStatusType StatusPacket::SENSOR_LED;
constexpr StatusPacket_EnumStatusType StatusPacket::SENSOR_STATE;
constexpr StatusPacket_EnumStatusType StatusPacket::SENSOR_FIELD;
constexpr StatusPacket_EnumStatusType StatusPacket::SYSTEM_STATUS;
constexpr StatusPacket_EnumStatusType StatusPacket::COMPLETE_SYSTEM_STATUS;
constexpr StatusPacket_EnumStatusType StatusPacket::EnumStatusType_MIN;
constexpr StatusPacket_EnumStatusType StatusPacket::EnumStatusType_MAX;
constexpr int StatusPacket::EnumStatusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusPacket_EnumSystemStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2dprotocol_2eproto);
  return file_level_enum_descriptors_net_2dprotocol_2eproto[5];
}
bool StatusPacket_EnumSystemStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StatusPacket_EnumSystemStatus StatusPacket::STARTUP;
constexpr StatusPacket_EnumSystemStatus StatusPacket::FLASHING;
constexpr StatusPacket_EnumSystemStatus StatusPacket::RUNNING;
constexpr StatusPacket_EnumSystemStatus StatusPacket::MENDER_UPDATE_FAIL;
constexpr StatusPacket_EnumSystemStatus StatusPacket::FPGA_UPDATE_FAIL;
constexpr StatusPacket_EnumSystemStatus StatusPacket::PENDING_COMMIT;
constexpr StatusPacket_EnumSystemStatus StatusPacket::STARTUP_ERROR;
constexpr StatusPacket_EnumSystemStatus StatusPacket::EnumSystemStatus_MIN;
constexpr StatusPacket_EnumSystemStatus StatusPacket::EnumSystemStatus_MAX;
constexpr int StatusPacket::EnumSystemStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DataFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<DataFrame>()._impl_._has_bits_);
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

DataFrame::DataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataFrame)
}
DataFrame::DataFrame(const DataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_){}
    , decltype(_impl_.datatype_){}
    , decltype(_impl_.val_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_, &from._impl_.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_) -
    reinterpret_cast<char*>(&_impl_.sensor_)) + sizeof(_impl_.val_));
  // @@protoc_insertion_point(copy_constructor:DataFrame)
}

inline void DataFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_){0}
    , decltype(_impl_.datatype_){0}
    , decltype(_impl_.val_){0}
  };
}

DataFrame::~DataFrame() {
  // @@protoc_insertion_point(destructor:DataFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:DataFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sensor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.val_) -
        reinterpret_cast<char*>(&_impl_.sensor_)) + sizeof(_impl_.val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor(&has_bits);
          _impl_.sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 datatype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_datatype(&has_bits);
          _impl_.datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_val(&has_bits);
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 sensor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sensor(), target);
  }

  // required int32 datatype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_datatype(), target);
  }

  // required int32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataFrame)
  return target;
}

size_t DataFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DataFrame)
  size_t total_size = 0;

  if (_internal_has_sensor()) {
    // required int32 sensor = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sensor());
  }

  if (_internal_has_datatype()) {
    // required int32 datatype = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datatype());
  }

  if (_internal_has_val()) {
    // required int32 val = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val());
  }

  return total_size;
}
size_t DataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataFrame)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 sensor = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sensor());

    // required int32 datatype = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datatype());

    // required int32 val = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFrame::GetClassData() const { return &_class_data_; }


void DataFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataFrame*>(&to_msg);
  auto& from = static_cast<const DataFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_ = from._impl_.sensor_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.datatype_ = from._impl_.datatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.val_ = from._impl_.val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFrame::CopyFrom(const DataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataFrame::InternalSwap(DataFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataFrame, _impl_.val_)
      + sizeof(DataFrame::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(DataFrame, _impl_.sensor_)>(
          reinterpret_cast<char*>(&_impl_.sensor_),
          reinterpret_cast<char*>(&other->_impl_.sensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[0]);
}

// ===================================================================

class DataPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPacket>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chassis_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

DataPacket::DataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataPacket)
}
DataPacket::DataPacket(const DataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.chassis_name_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.num_sensors_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chassis_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chassis_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chassis_name()) {
    _this->_impl_.chassis_name_.Set(from._internal_chassis_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_sensors_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.num_sensors_));
  // @@protoc_insertion_point(copy_constructor:DataPacket)
}

inline void DataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.chassis_name_){}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.num_sensors_){0}
  };
  _impl_.chassis_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chassis_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:DataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.chassis_name_.Destroy();
}

void DataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:DataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chassis_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_sensors_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.num_sensors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string chassis_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chassis_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "DataPacket.chassis_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 num_sensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_sensors(&has_bits);
          _impl_.num_sensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DataFrame data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // required string chassis_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chassis_name().data(), static_cast<int>(this->_internal_chassis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DataPacket.chassis_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chassis_name(), target);
  }

  // required int32 num_sensors = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_sensors(), target);
  }

  // repeated .DataFrame data = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataPacket)
  return target;
}

size_t DataPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DataPacket)
  size_t total_size = 0;

  if (_internal_has_chassis_name()) {
    // required string chassis_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chassis_name());
  }

  if (_internal_has_timestamp()) {
    // required uint32 timestamp = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  if (_internal_has_num_sensors()) {
    // required int32 num_sensors = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_sensors());
  }

  return total_size;
}
size_t DataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataPacket)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string chassis_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chassis_name());

    // required uint32 timestamp = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());

    // required int32 num_sensors = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_sensors());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataFrame data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPacket::GetClassData() const { return &_class_data_; }


void DataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataPacket*>(&to_msg);
  auto& from = static_cast<const DataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chassis_name(from._internal_chassis_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_sensors_ = from._impl_.num_sensors_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacket::CopyFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_))
    return false;
  return true;
}

void DataPacket::InternalSwap(DataPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chassis_name_, lhs_arena,
      &other->_impl_.chassis_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.num_sensors_)
      + sizeof(DataPacket::_impl_.num_sensors_)
      - PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[1]);
}

// ===================================================================

class RawCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<RawCommand>()._impl_._has_bits_);
  static void set_has_all_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_register_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RawCommand::RawCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RawCommand)
}
RawCommand::RawCommand(const RawCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RawCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_sensors_){}
    , decltype(_impl_.sensor_num_){}
    , decltype(_impl_.register_address_){}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.all_sensors_, &from._impl_.all_sensors_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_) -
    reinterpret_cast<char*>(&_impl_.all_sensors_)) + sizeof(_impl_.data_));
  // @@protoc_insertion_point(copy_constructor:RawCommand)
}

inline void RawCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_sensors_){false}
    , decltype(_impl_.sensor_num_){0u}
    , decltype(_impl_.register_address_){0u}
    , decltype(_impl_.data_){0u}
  };
}

RawCommand::~RawCommand() {
  // @@protoc_insertion_point(destructor:RawCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RawCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:RawCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.all_sensors_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_) -
        reinterpret_cast<char*>(&_impl_.all_sensors_)) + sizeof(_impl_.data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool all_sensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_all_sensors(&has_bits);
          _impl_.all_sensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 sensor_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sensor_num(&has_bits);
          _impl_.sensor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 register_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_register_address(&has_bits);
          _impl_.register_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data(&has_bits);
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool all_sensors = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_sensors(), target);
  }

  // required uint32 sensor_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sensor_num(), target);
  }

  // required uint32 register_address = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_address(), target);
  }

  // required uint32 data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawCommand)
  return target;
}

size_t RawCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RawCommand)
  size_t total_size = 0;

  if (_internal_has_all_sensors()) {
    // required bool all_sensors = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_sensor_num()) {
    // required uint32 sensor_num = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_num());
  }

  if (_internal_has_register_address()) {
    // required uint32 register_address = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_address());
  }

  if (_internal_has_data()) {
    // required uint32 data = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data());
  }

  return total_size;
}
size_t RawCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawCommand)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool all_sensors = 1;
    total_size += 1 + 1;

    // required uint32 sensor_num = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_num());

    // required uint32 register_address = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_address());

    // required uint32 data = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RawCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawCommand::GetClassData() const { return &_class_data_; }


void RawCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RawCommand*>(&to_msg);
  auto& from = static_cast<const RawCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RawCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.all_sensors_ = from._impl_.all_sensors_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sensor_num_ = from._impl_.sensor_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.register_address_ = from._impl_.register_address_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_ = from._impl_.data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawCommand::CopyFrom(const RawCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RawCommand::InternalSwap(RawCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawCommand, _impl_.data_)
      + sizeof(RawCommand::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(RawCommand, _impl_.all_sensors_)>(
          reinterpret_cast<char*>(&_impl_.all_sensors_),
          reinterpret_cast<char*>(&other->_impl_.all_sensors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[2]);
}

// ===================================================================

class DevModeValidation::_Internal {
 public:
  using HasBits = decltype(std::declval<DevModeValidation>()._impl_._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DevModeValidation::DevModeValidation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DevModeValidation)
}
DevModeValidation::DevModeValidation(const DevModeValidation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DevModeValidation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.password_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.enable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.valid_, &from._impl_.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_) -
    reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.enable_));
  // @@protoc_insertion_point(copy_constructor:DevModeValidation)
}

inline void DevModeValidation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.password_){}
    , decltype(_impl_.valid_){false}
    , decltype(_impl_.enable_){false}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DevModeValidation::~DevModeValidation() {
  // @@protoc_insertion_point(destructor:DevModeValidation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DevModeValidation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void DevModeValidation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DevModeValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:DevModeValidation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.password_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_) -
      reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.enable_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DevModeValidation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "DevModeValidation.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_valid(&has_bits);
          _impl_.valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DevModeValidation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DevModeValidation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DevModeValidation.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional bool valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_valid(), target);
  }

  // optional bool enable = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DevModeValidation)
  return target;
}

size_t DevModeValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DevModeValidation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional bool valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DevModeValidation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DevModeValidation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DevModeValidation::GetClassData() const { return &_class_data_; }


void DevModeValidation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DevModeValidation*>(&to_msg);
  auto& from = static_cast<const DevModeValidation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DevModeValidation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.valid_ = from._impl_.valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DevModeValidation::CopyFrom(const DevModeValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DevModeValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevModeValidation::IsInitialized() const {
  return true;
}

void DevModeValidation::InternalSwap(DevModeValidation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DevModeValidation, _impl_.enable_)
      + sizeof(DevModeValidation::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(DevModeValidation, _impl_.valid_)>(
          reinterpret_cast<char*>(&_impl_.valid_),
          reinterpret_cast<char*>(&other->_impl_.valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DevModeValidation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[3]);
}

// ===================================================================

class ConfigMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigMessage>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConfigMessage::ConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ConfigMessage)
}
ConfigMessage::ConfigMessage(const ConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.datatype_){}
    , decltype(_impl_.freq_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.freq_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.freq_));
  // @@protoc_insertion_point(copy_constructor:ConfigMessage)
}

inline void ConfigMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.datatype_){0u}
    , decltype(_impl_.freq_){0u}
  };
}

ConfigMessage::~ConfigMessage() {
  // @@protoc_insertion_point(destructor:ConfigMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.freq_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.freq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 datatype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_datatype(&has_bits);
          _impl_.datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_freq(&has_bits);
          _impl_.freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional uint32 datatype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_datatype(), target);
  }

  // optional uint32 freq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigMessage)
  return target;
}

size_t ConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional uint32 datatype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datatype());
    }

    // optional uint32 freq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_freq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigMessage::GetClassData() const { return &_class_data_; }


void ConfigMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigMessage*>(&to_msg);
  auto& from = static_cast<const ConfigMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConfigMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.datatype_ = from._impl_.datatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.freq_ = from._impl_.freq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMessage::CopyFrom(const ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMessage::IsInitialized() const {
  return true;
}

void ConfigMessage::InternalSwap(ConfigMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.freq_)
      + sizeof(ConfigMessage::_impl_.freq_)
      - PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[4]);
}

// ===================================================================

class LogicMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicMessage>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LogicMessage::LogicMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogicMessage)
}
LogicMessage::LogicMessage(const LogicMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_list_){from._impl_.sensor_list_}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:LogicMessage)
}

inline void LogicMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_list_){arena}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.type_){1}
  };
}

LogicMessage::~LogicMessage() {
  // @@protoc_insertion_point(destructor:LogicMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_list_.~RepeatedField();
}

void LogicMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.sensor_id_ = 0u;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LogicMessage.EnumLogicType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LogicMessage_EnumLogicType_IsValid(val))) {
            _internal_set_type(static_cast<::LogicMessage_EnumLogicType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 sensor_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sensor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sensor_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional .LogicMessage.EnumLogicType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated uint32 sensor_list = 3;
  for (int i = 0, n = this->_internal_sensor_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sensor_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMessage)
  return target;
}

size_t LogicMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sensor_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.sensor_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sensor_list_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional .LogicMessage.EnumLogicType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicMessage::GetClassData() const { return &_class_data_; }


void LogicMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicMessage*>(&to_msg);
  auto& from = static_cast<const LogicMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogicMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensor_list_.MergeFrom(from._impl_.sensor_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicMessage::CopyFrom(const LogicMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicMessage::IsInitialized() const {
  return true;
}

void LogicMessage::InternalSwap(LogicMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sensor_list_.InternalSwap(&other->_impl_.sensor_list_);
  swap(_impl_.sensor_id_, other->_impl_.sensor_id_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[5]);
}

// ===================================================================

class LogicInterruptMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicInterruptMessage>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogicInterruptMessage::LogicInterruptMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogicInterruptMessage)
}
LogicInterruptMessage::LogicInterruptMessage(const LogicInterruptMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicInterruptMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_list_){from._impl_.sensor_list_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:LogicInterruptMessage)
}

inline void LogicInterruptMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_list_){arena}
    , decltype(_impl_.type_){0u}
  };
}

LogicInterruptMessage::~LogicInterruptMessage() {
  // @@protoc_insertion_point(destructor:LogicInterruptMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicInterruptMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_list_.~RepeatedField();
}

void LogicInterruptMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicInterruptMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicInterruptMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_list_.Clear();
  _impl_.type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicInterruptMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 sensor_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sensor_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sensor_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicInterruptMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicInterruptMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 sensor_list = 2;
  for (int i = 0, n = this->_internal_sensor_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sensor_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicInterruptMessage)
  return target;
}

size_t LogicInterruptMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicInterruptMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sensor_list = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.sensor_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sensor_list_size());
    total_size += data_size;
  }

  // optional uint32 type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicInterruptMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicInterruptMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicInterruptMessage::GetClassData() const { return &_class_data_; }


void LogicInterruptMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicInterruptMessage*>(&to_msg);
  auto& from = static_cast<const LogicInterruptMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogicInterruptMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensor_list_.MergeFrom(from._impl_.sensor_list_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicInterruptMessage::CopyFrom(const LogicInterruptMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicInterruptMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicInterruptMessage::IsInitialized() const {
  return true;
}

void LogicInterruptMessage::InternalSwap(LogicInterruptMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sensor_list_.InternalSwap(&other->_impl_.sensor_list_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicInterruptMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[6]);
}

// ===================================================================

class WaveMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<WaveMessage>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WaveMessage::WaveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WaveMessage)
}
WaveMessage::WaveMessage(const WaveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WaveMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.freq_){}
    , decltype(_impl_.amp_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:WaveMessage)
}

inline void WaveMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.freq_){0}
    , decltype(_impl_.amp_){0}
    , decltype(_impl_.type_){0u}
  };
}

WaveMessage::~WaveMessage() {
  // @@protoc_insertion_point(destructor:WaveMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaveMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WaveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WaveMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaveMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_freq(&has_bits);
          _impl_.freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float amp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_amp(&has_bits);
          _impl_.amp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaveMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WaveMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional float freq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_freq(), target);
  }

  // optional float amp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_amp(), target);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WaveMessage)
  return target;
}

size_t WaveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WaveMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional float freq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float amp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaveMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WaveMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaveMessage::GetClassData() const { return &_class_data_; }


void WaveMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WaveMessage*>(&to_msg);
  auto& from = static_cast<const WaveMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WaveMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.freq_ = from._impl_.freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.amp_ = from._impl_.amp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaveMessage::CopyFrom(const WaveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WaveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaveMessage::IsInitialized() const {
  return true;
}

void WaveMessage::InternalSwap(WaveMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaveMessage, _impl_.type_)
      + sizeof(WaveMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(WaveMessage, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaveMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[7]);
}

// ===================================================================

class CmdPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CmdPacket>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::RawCommand& raw_cmd(const CmdPacket* msg);
  static void set_has_raw_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::DevModeValidation& dev_mode(const CmdPacket* msg);
  static void set_has_dev_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chassis_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_closed_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_sync_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::RawCommand&
CmdPacket::_Internal::raw_cmd(const CmdPacket* msg) {
  return *msg->_impl_.raw_cmd_;
}
const ::DevModeValidation&
CmdPacket::_Internal::dev_mode(const CmdPacket* msg) {
  return *msg->_impl_.dev_mode_;
}
CmdPacket::CmdPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CmdPacket)
}
CmdPacket::CmdPacket(const CmdPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CmdPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_list_){from._impl_.config_list_}
    , decltype(_impl_.logic_req_){from._impl_.logic_req_}
    , decltype(_impl_.wave_req_){from._impl_.wave_req_}
    , decltype(_impl_.logic_interrupt_req_){from._impl_.logic_interrupt_req_}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.raw_cmd_){nullptr}
    , decltype(_impl_.dev_mode_){nullptr}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.datatype_){}
    , decltype(_impl_.freq_){}
    , decltype(_impl_.chassis_ident_){}
    , decltype(_impl_.closed_loop_){}
    , decltype(_impl_.num_sync_chassis_){}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_raw_cmd()) {
    _this->_impl_.raw_cmd_ = new ::RawCommand(*from._impl_.raw_cmd_);
  }
  if (from._internal_has_dev_mode()) {
    _this->_impl_.dev_mode_ = new ::DevModeValidation(*from._impl_.dev_mode_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cmd_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.cmd_));
  // @@protoc_insertion_point(copy_constructor:CmdPacket)
}

inline void CmdPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_list_){arena}
    , decltype(_impl_.logic_req_){arena}
    , decltype(_impl_.wave_req_){arena}
    , decltype(_impl_.logic_interrupt_req_){arena}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.raw_cmd_){nullptr}
    , decltype(_impl_.dev_mode_){nullptr}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.datatype_){0u}
    , decltype(_impl_.freq_){0u}
    , decltype(_impl_.chassis_ident_){false}
    , decltype(_impl_.closed_loop_){false}
    , decltype(_impl_.num_sync_chassis_){0u}
    , decltype(_impl_.cmd_){2}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CmdPacket::~CmdPacket() {
  // @@protoc_insertion_point(destructor:CmdPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CmdPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_list_.~RepeatedPtrField();
  _impl_.logic_req_.~RepeatedPtrField();
  _impl_.wave_req_.~RepeatedPtrField();
  _impl_.logic_interrupt_req_.~RepeatedPtrField();
  _impl_.uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.raw_cmd_;
  if (this != internal_default_instance()) delete _impl_.dev_mode_;
}

void CmdPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CmdPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:CmdPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.config_list_.Clear();
  _impl_.logic_req_.Clear();
  _impl_.wave_req_.Clear();
  _impl_.logic_interrupt_req_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.raw_cmd_ != nullptr);
      _impl_.raw_cmd_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.dev_mode_ != nullptr);
      _impl_.dev_mode_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.closed_loop_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.closed_loop_));
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.num_sync_chassis_ = 0u;
    _impl_.cmd_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CmdPacket.EnumCmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CmdPacket_EnumCmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::CmdPacket_EnumCmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 datatype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_datatype(&has_bits);
          _impl_.datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_freq(&has_bits);
          _impl_.freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RawCommand raw_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_cmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uri = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CmdPacket.uri");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .ConfigMessage config_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .DevModeValidation dev_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dev_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LogicMessage logic_req = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logic_req(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .WaveMessage wave_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wave_req(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool chassis_ident = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_chassis_ident(&has_bits);
          _impl_.chassis_ident_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool closed_loop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_closed_loop(&has_bits);
          _impl_.closed_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LogicInterruptMessage logic_interrupt_req = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logic_interrupt_req(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_sync_chassis = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_num_sync_chassis(&has_bits);
          _impl_.num_sync_chassis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CmdPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CmdPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CmdPacket.EnumCmdType cmd = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // optional uint32 sensor_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sensor_id(), target);
  }

  // optional uint32 datatype = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_datatype(), target);
  }

  // optional uint32 freq = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_freq(), target);
  }

  // optional .RawCommand raw_cmd = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::raw_cmd(this),
        _Internal::raw_cmd(this).GetCachedSize(), target, stream);
  }

  // optional string uri = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CmdPacket.uri");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_uri(), target);
  }

  // repeated .ConfigMessage config_list = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_config_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_config_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .DevModeValidation dev_mode = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::dev_mode(this),
        _Internal::dev_mode(this).GetCachedSize(), target, stream);
  }

  // repeated .LogicMessage logic_req = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logic_req_size()); i < n; i++) {
    const auto& repfield = this->_internal_logic_req(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .WaveMessage wave_req = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wave_req_size()); i < n; i++) {
    const auto& repfield = this->_internal_wave_req(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool chassis_ident = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_chassis_ident(), target);
  }

  // optional bool closed_loop = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_closed_loop(), target);
  }

  // repeated .LogicInterruptMessage logic_interrupt_req = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logic_interrupt_req_size()); i < n; i++) {
    const auto& repfield = this->_internal_logic_interrupt_req(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 num_sync_chassis = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_num_sync_chassis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CmdPacket)
  return target;
}

size_t CmdPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CmdPacket)
  size_t total_size = 0;

  // required .CmdPacket.EnumCmdType cmd = 1;
  if (_internal_has_cmd()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigMessage config_list = 7;
  total_size += 1UL * this->_internal_config_list_size();
  for (const auto& msg : this->_impl_.config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMessage logic_req = 9;
  total_size += 1UL * this->_internal_logic_req_size();
  for (const auto& msg : this->_impl_.logic_req_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .WaveMessage wave_req = 10;
  total_size += 1UL * this->_internal_wave_req_size();
  for (const auto& msg : this->_impl_.wave_req_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicInterruptMessage logic_interrupt_req = 13;
  total_size += 1UL * this->_internal_logic_interrupt_req_size();
  for (const auto& msg : this->_impl_.logic_interrupt_req_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string uri = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional .RawCommand raw_cmd = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.raw_cmd_);
    }

    // optional .DevModeValidation dev_mode = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dev_mode_);
    }

    // optional uint32 sensor_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional uint32 datatype = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datatype());
    }

    // optional uint32 freq = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_freq());
    }

    // optional bool chassis_ident = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool closed_loop = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 num_sync_chassis = 14;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_sync_chassis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmdPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CmdPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmdPacket::GetClassData() const { return &_class_data_; }


void CmdPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CmdPacket*>(&to_msg);
  auto& from = static_cast<const CmdPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CmdPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.config_list_.MergeFrom(from._impl_.config_list_);
  _this->_impl_.logic_req_.MergeFrom(from._impl_.logic_req_);
  _this->_impl_.wave_req_.MergeFrom(from._impl_.wave_req_);
  _this->_impl_.logic_interrupt_req_.MergeFrom(from._impl_.logic_interrupt_req_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_raw_cmd()->::RawCommand::MergeFrom(
          from._internal_raw_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dev_mode()->::DevModeValidation::MergeFrom(
          from._internal_dev_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.datatype_ = from._impl_.datatype_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.freq_ = from._impl_.freq_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.chassis_ident_ = from._impl_.chassis_ident_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.closed_loop_ = from._impl_.closed_loop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.num_sync_chassis_ = from._impl_.num_sync_chassis_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.cmd_ = from._impl_.cmd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CmdPacket::CopyFrom(const CmdPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CmdPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_raw_cmd()) {
    if (!_impl_.raw_cmd_->IsInitialized()) return false;
  }
  return true;
}

void CmdPacket::InternalSwap(CmdPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.config_list_.InternalSwap(&other->_impl_.config_list_);
  _impl_.logic_req_.InternalSwap(&other->_impl_.logic_req_);
  _impl_.wave_req_.InternalSwap(&other->_impl_.wave_req_);
  _impl_.logic_interrupt_req_.InternalSwap(&other->_impl_.logic_interrupt_req_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdPacket, _impl_.num_sync_chassis_)
      + sizeof(CmdPacket::_impl_.num_sync_chassis_)
      - PROTOBUF_FIELD_OFFSET(CmdPacket, _impl_.raw_cmd_)>(
          reinterpret_cast<char*>(&_impl_.raw_cmd_),
          reinterpret_cast<char*>(&other->_impl_.raw_cmd_));
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[8]);
}

// ===================================================================

class SensorStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorStatus>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sensor_card_serial_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sensor_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sensor_serial_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

SensorStatus::SensorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SensorStatus)
}
SensorStatus::SensorStatus(const SensorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_card_serial_num_){}
    , decltype(_impl_.sensor_version_){}
    , decltype(_impl_.sensor_serial_num_){}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.sensor_connected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sensor_card_serial_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_card_serial_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sensor_card_serial_num()) {
    _this->_impl_.sensor_card_serial_num_.Set(from._internal_sensor_card_serial_num(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensor_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sensor_version()) {
    _this->_impl_.sensor_version_.Set(from._internal_sensor_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensor_serial_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_serial_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sensor_serial_num()) {
    _this->_impl_.sensor_serial_num_.Set(from._internal_sensor_serial_num(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sensor_connected_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.sensor_connected_));
  // @@protoc_insertion_point(copy_constructor:SensorStatus)
}

inline void SensorStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_card_serial_num_){}
    , decltype(_impl_.sensor_version_){}
    , decltype(_impl_.sensor_serial_num_){}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.sensor_connected_){false}
  };
  _impl_.sensor_card_serial_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_card_serial_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensor_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensor_serial_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_serial_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorStatus::~SensorStatus() {
  // @@protoc_insertion_point(destructor:SensorStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_card_serial_num_.Destroy();
  _impl_.sensor_version_.Destroy();
  _impl_.sensor_serial_num_.Destroy();
}

void SensorStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sensor_card_serial_num_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sensor_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sensor_serial_num_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sensor_connected_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.sensor_connected_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sensor_card_serial_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sensor_card_serial_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SensorStatus.sensor_card_serial_num");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sensor_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sensor_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SensorStatus.sensor_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool sensor_connected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sensor_connected(&has_bits);
          _impl_.sensor_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sensor_serial_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sensor_serial_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SensorStatus.sensor_serial_num");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional string sensor_card_serial_num = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_card_serial_num().data(), static_cast<int>(this->_internal_sensor_card_serial_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SensorStatus.sensor_card_serial_num");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensor_card_serial_num(), target);
  }

  // optional string sensor_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_version().data(), static_cast<int>(this->_internal_sensor_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SensorStatus.sensor_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sensor_version(), target);
  }

  // optional bool sensor_connected = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_sensor_connected(), target);
  }

  // optional string sensor_serial_num = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_serial_num().data(), static_cast<int>(this->_internal_sensor_serial_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SensorStatus.sensor_serial_num");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sensor_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorStatus)
  return target;
}

size_t SensorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorStatus)
  size_t total_size = 0;

  // required uint32 sensor_id = 1;
  if (_internal_has_sensor_id()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sensor_card_serial_num = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_card_serial_num());
    }

    // optional string sensor_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_version());
    }

    // optional string sensor_serial_num = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_serial_num());
    }

  }
  // optional bool sensor_connected = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorStatus::GetClassData() const { return &_class_data_; }


void SensorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorStatus*>(&to_msg);
  auto& from = static_cast<const SensorStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SensorStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sensor_card_serial_num(from._internal_sensor_card_serial_num());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sensor_version(from._internal_sensor_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sensor_serial_num(from._internal_sensor_serial_num());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sensor_connected_ = from._impl_.sensor_connected_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorStatus::CopyFrom(const SensorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SensorStatus::InternalSwap(SensorStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_card_serial_num_, lhs_arena,
      &other->_impl_.sensor_card_serial_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_version_, lhs_arena,
      &other->_impl_.sensor_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_serial_num_, lhs_arena,
      &other->_impl_.sensor_serial_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorStatus, _impl_.sensor_connected_)
      + sizeof(SensorStatus::_impl_.sensor_connected_)
      - PROTOBUF_FIELD_OFFSET(SensorStatus, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[9]);
}

// ===================================================================

class SensorState::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorState>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorState::SensorState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SensorState)
}
SensorState::SensorState(const SensorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.error_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_flags_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.error_flags_));
  // @@protoc_insertion_point(copy_constructor:SensorState)
}

inline void SensorState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.error_flags_){0u}
  };
}

SensorState::~SensorState() {
  // @@protoc_insertion_point(destructor:SensorState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorState::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_flags_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.error_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SensorState.EnumStateType state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SensorState_EnumStateType_IsValid(val))) {
            _internal_set_state(static_cast<::SensorState_EnumStateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 error_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_error_flags(&has_bits);
          _impl_.error_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional .SensorState.EnumStateType state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // optional uint32 error_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_error_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorState)
  return target;
}

size_t SensorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional .SensorState.EnumStateType state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 error_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorState::GetClassData() const { return &_class_data_; }


void SensorState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorState*>(&to_msg);
  auto& from = static_cast<const SensorState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SensorState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_flags_ = from._impl_.error_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorState::CopyFrom(const SensorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorState::IsInitialized() const {
  return true;
}

void SensorState::InternalSwap(SensorState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorState, _impl_.error_flags_)
      + sizeof(SensorState::_impl_.error_flags_)
      - PROTOBUF_FIELD_OFFSET(SensorState, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[10]);
}

// ===================================================================

class SensorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorConfig>()._impl_._has_bits_);
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_calibration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SensorConfig::SensorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SensorConfig)
}
SensorConfig::SensorConfig(const SensorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_){}
    , decltype(_impl_.datatype_){}
    , decltype(_impl_.freq_){}
    , decltype(_impl_.calibration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_, &from._impl_.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.calibration_) -
    reinterpret_cast<char*>(&_impl_.sensor_)) + sizeof(_impl_.calibration_));
  // @@protoc_insertion_point(copy_constructor:SensorConfig)
}

inline void SensorConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_){0u}
    , decltype(_impl_.datatype_){0u}
    , decltype(_impl_.freq_){0u}
    , decltype(_impl_.calibration_){0}
  };
}

SensorConfig::~SensorConfig() {
  // @@protoc_insertion_point(destructor:SensorConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.sensor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.calibration_) -
        reinterpret_cast<char*>(&_impl_.sensor_)) + sizeof(_impl_.calibration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor(&has_bits);
          _impl_.sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 datatype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_datatype(&has_bits);
          _impl_.datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_freq(&has_bits);
          _impl_.freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float calibration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_calibration(&has_bits);
          _impl_.calibration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 sensor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor(), target);
  }

  // required uint32 datatype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_datatype(), target);
  }

  // required uint32 freq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_freq(), target);
  }

  // optional float calibration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_calibration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorConfig)
  return target;
}

size_t SensorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SensorConfig)
  size_t total_size = 0;

  if (_internal_has_sensor()) {
    // required uint32 sensor = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor());
  }

  if (_internal_has_datatype()) {
    // required uint32 datatype = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datatype());
  }

  if (_internal_has_freq()) {
    // required uint32 freq = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_freq());
  }

  return total_size;
}
size_t SensorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorConfig)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 sensor = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor());

    // required uint32 datatype = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datatype());

    // required uint32 freq = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_freq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float calibration = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorConfig::GetClassData() const { return &_class_data_; }


void SensorConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorConfig*>(&to_msg);
  auto& from = static_cast<const SensorConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SensorConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_ = from._impl_.sensor_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.datatype_ = from._impl_.datatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.freq_ = from._impl_.freq_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.calibration_ = from._impl_.calibration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorConfig::CopyFrom(const SensorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SensorConfig::InternalSwap(SensorConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorConfig, _impl_.calibration_)
      + sizeof(SensorConfig::_impl_.calibration_)
      - PROTOBUF_FIELD_OFFSET(SensorConfig, _impl_.sensor_)>(
          reinterpret_cast<char*>(&_impl_.sensor_),
          reinterpret_cast<char*>(&other->_impl_.sensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[11]);
}

// ===================================================================

class SensorLed::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorLed>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blink_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorLed::SensorLed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SensorLed)
}
SensorLed::SensorLed(const SensorLed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorLed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.blink_state_){}
    , decltype(_impl_.color_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:SensorLed)
}

inline void SensorLed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.blink_state_){0u}
    , decltype(_impl_.color_){0u}
  };
}

SensorLed::~SensorLed() {
  // @@protoc_insertion_point(destructor:SensorLed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorLed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorLed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorLed::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorLed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.color_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.color_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorLed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 blink_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_blink_state(&has_bits);
          _impl_.blink_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorLed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorLed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional uint32 blink_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_blink_state(), target);
  }

  // optional uint32 color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorLed)
  return target;
}

size_t SensorLed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorLed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional uint32 blink_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blink_state());
    }

    // optional uint32 color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorLed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorLed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorLed::GetClassData() const { return &_class_data_; }


void SensorLed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorLed*>(&to_msg);
  auto& from = static_cast<const SensorLed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SensorLed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.blink_state_ = from._impl_.blink_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorLed::CopyFrom(const SensorLed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorLed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorLed::IsInitialized() const {
  return true;
}

void SensorLed::InternalSwap(SensorLed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorLed, _impl_.color_)
      + sizeof(SensorLed::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(SensorLed, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorLed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[12]);
}

// ===================================================================

class SensorField::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorField>()._impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SensorField::SensorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SensorField)
}
SensorField::SensorField(const SensorField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.field_x_){}
    , decltype(_impl_.field_y_){}
    , decltype(_impl_.field_z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.field_z_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.field_z_));
  // @@protoc_insertion_point(copy_constructor:SensorField)
}

inline void SensorField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.field_x_){0}
    , decltype(_impl_.field_y_){0}
    , decltype(_impl_.field_z_){0}
  };
}

SensorField::~SensorField() {
  // @@protoc_insertion_point(destructor:SensorField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorField::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.field_z_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.field_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float field_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_field_x(&has_bits);
          _impl_.field_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float field_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_field_y(&has_bits);
          _impl_.field_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float field_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_field_z(&has_bits);
          _impl_.field_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // optional float field_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_field_x(), target);
  }

  // optional float field_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_field_y(), target);
  }

  // optional float field_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_field_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorField)
  return target;
}

size_t SensorField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional float field_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float field_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float field_z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorField::GetClassData() const { return &_class_data_; }


void SensorField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorField*>(&to_msg);
  auto& from = static_cast<const SensorField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SensorField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_x_ = from._impl_.field_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.field_y_ = from._impl_.field_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.field_z_ = from._impl_.field_z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorField::CopyFrom(const SensorField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorField::IsInitialized() const {
  return true;
}

void SensorField::InternalSwap(SensorField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorField, _impl_.field_z_)
      + sizeof(SensorField::_impl_.field_z_)
      - PROTOBUF_FIELD_OFFSET(SensorField, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[13]);
}

// ===================================================================

class ChassisStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisStatus>()._impl_._has_bits_);
  static void set_has_closed_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChassisStatus::ChassisStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChassisStatus)
}
ChassisStatus::ChassisStatus(const ChassisStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChassisStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.closed_loop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.closed_loop_ = from._impl_.closed_loop_;
  // @@protoc_insertion_point(copy_constructor:ChassisStatus)
}

inline void ChassisStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.closed_loop_){false}
  };
}

ChassisStatus::~ChassisStatus() {
  // @@protoc_insertion_point(destructor:ChassisStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChassisStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChassisStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChassisStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ChassisStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.closed_loop_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool closed_loop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_closed_loop(&has_bits);
          _impl_.closed_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChassisStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChassisStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool closed_loop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_closed_loop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChassisStatus)
  return target;
}

size_t ChassisStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChassisStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool closed_loop = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChassisStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChassisStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChassisStatus::GetClassData() const { return &_class_data_; }


void ChassisStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChassisStatus*>(&to_msg);
  auto& from = static_cast<const ChassisStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChassisStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_closed_loop()) {
    _this->_internal_set_closed_loop(from._internal_closed_loop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChassisStatus::CopyFrom(const ChassisStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChassisStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisStatus::IsInitialized() const {
  return true;
}

void ChassisStatus::InternalSwap(ChassisStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.closed_loop_, other->_impl_.closed_loop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[14]);
}

// ===================================================================

class SystemStatusMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemStatusMessage>()._impl_._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_serial_short(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SystemStatusMessage::SystemStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SystemStatusMessage)
}
SystemStatusMessage::SystemStatusMessage(const SystemStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemStatusMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.master_){}
    , decltype(_impl_.serial_){}
    , decltype(_impl_.serial_short_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.total_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.master_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_master()) {
    _this->_impl_.master_.Set(from._internal_master(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serial()) {
    _this->_impl_.serial_.Set(from._internal_serial(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_short_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_short_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serial_short()) {
    _this->_impl_.serial_short_.Set(from._internal_serial_short(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.total_));
  // @@protoc_insertion_point(copy_constructor:SystemStatusMessage)
}

inline void SystemStatusMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.master_){}
    , decltype(_impl_.serial_){}
    , decltype(_impl_.serial_short_){}
    , decltype(_impl_.num_){0u}
    , decltype(_impl_.total_){0u}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.master_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_short_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_short_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemStatusMessage::~SystemStatusMessage() {
  // @@protoc_insertion_point(destructor:SystemStatusMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.master_.Destroy();
  _impl_.serial_.Destroy();
  _impl_.serial_short_.Destroy();
}

void SystemStatusMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SystemStatusMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.master_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serial_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.serial_short_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_) -
        reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.total_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemStatusMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total(&has_bits);
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SystemStatusMessage.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string master = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_master();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SystemStatusMessage.master");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string serial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serial();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SystemStatusMessage.serial");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string serial_short = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serial_short();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SystemStatusMessage.serial_short");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemStatusMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SystemStatusMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemStatusMessage.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional string master = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_master().data(), static_cast<int>(this->_internal_master().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemStatusMessage.master");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_master(), target);
  }

  // optional string serial = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemStatusMessage.serial");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_serial(), target);
  }

  // optional string serial_short = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_short().data(), static_cast<int>(this->_internal_serial_short().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemStatusMessage.serial_short");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_serial_short(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SystemStatusMessage)
  return target;
}

size_t SystemStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SystemStatusMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string version = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string master = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_master());
    }

    // optional string serial = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial());
    }

    // optional string serial_short = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_short());
    }

    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
    }

    // optional uint32 total = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemStatusMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemStatusMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemStatusMessage::GetClassData() const { return &_class_data_; }


void SystemStatusMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemStatusMessage*>(&to_msg);
  auto& from = static_cast<const SystemStatusMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SystemStatusMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_master(from._internal_master());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serial(from._internal_serial());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_serial_short(from._internal_serial_short());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.num_ = from._impl_.num_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.total_ = from._impl_.total_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemStatusMessage::CopyFrom(const SystemStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SystemStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatusMessage::IsInitialized() const {
  return true;
}

void SystemStatusMessage::InternalSwap(SystemStatusMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.master_, lhs_arena,
      &other->_impl_.master_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_, lhs_arena,
      &other->_impl_.serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_short_, lhs_arena,
      &other->_impl_.serial_short_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemStatusMessage, _impl_.total_)
      + sizeof(SystemStatusMessage::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(SystemStatusMessage, _impl_.num_)>(
          reinterpret_cast<char*>(&_impl_.num_),
          reinterpret_cast<char*>(&other->_impl_.num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemStatusMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[15]);
}

// ===================================================================

class StatusPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusPacket>()._impl_._has_bits_);
  static void set_has_chassis_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_progress_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ChassisStatus& chassis_status(const StatusPacket* msg);
  static void set_has_chassis_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SystemStatusMessage& system_status(const StatusPacket* msg);
  static void set_has_system_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000163) ^ 0x00000163) != 0;
  }
};

const ::ChassisStatus&
StatusPacket::_Internal::chassis_status(const StatusPacket* msg) {
  return *msg->_impl_.chassis_status_;
}
const ::SystemStatusMessage&
StatusPacket::_Internal::system_status(const StatusPacket* msg) {
  return *msg->_impl_.system_status_;
}
StatusPacket::StatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StatusPacket)
}
StatusPacket::StatusPacket(const StatusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_status_){from._impl_.sensor_status_}
    , decltype(_impl_.sensor_config_){from._impl_.sensor_config_}
    , decltype(_impl_.sensor_led_){from._impl_.sensor_led_}
    , decltype(_impl_.sensor_state_){from._impl_.sensor_state_}
    , decltype(_impl_.sensor_field_){from._impl_.sensor_field_}
    , decltype(_impl_.chassis_name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.progress_msg_){}
    , decltype(_impl_.chassis_status_){nullptr}
    , decltype(_impl_.system_status_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.num_sensors_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chassis_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chassis_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chassis_name()) {
    _this->_impl_.chassis_name_.Set(from._internal_chassis_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.progress_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.progress_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_progress_msg()) {
    _this->_impl_.progress_msg_.Set(from._internal_progress_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chassis_status()) {
    _this->_impl_.chassis_status_ = new ::ChassisStatus(*from._impl_.chassis_status_);
  }
  if (from._internal_has_system_status()) {
    _this->_impl_.system_status_ = new ::SystemStatusMessage(*from._impl_.system_status_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:StatusPacket)
}

inline void StatusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_status_){arena}
    , decltype(_impl_.sensor_config_){arena}
    , decltype(_impl_.sensor_led_){arena}
    , decltype(_impl_.sensor_state_){arena}
    , decltype(_impl_.sensor_field_){arena}
    , decltype(_impl_.chassis_name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.progress_msg_){}
    , decltype(_impl_.chassis_status_){nullptr}
    , decltype(_impl_.system_status_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.num_sensors_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.status_){0}
  };
  _impl_.chassis_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chassis_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.progress_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.progress_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusPacket::~StatusPacket() {
  // @@protoc_insertion_point(destructor:StatusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_status_.~RepeatedPtrField();
  _impl_.sensor_config_.~RepeatedPtrField();
  _impl_.sensor_led_.~RepeatedPtrField();
  _impl_.sensor_state_.~RepeatedPtrField();
  _impl_.sensor_field_.~RepeatedPtrField();
  _impl_.chassis_name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.progress_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chassis_status_;
  if (this != internal_default_instance()) delete _impl_.system_status_;
}

void StatusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_status_.Clear();
  _impl_.sensor_config_.Clear();
  _impl_.sensor_led_.Clear();
  _impl_.sensor_state_.Clear();
  _impl_.sensor_field_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chassis_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.progress_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.chassis_status_ != nullptr);
      _impl_.chassis_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.system_status_ != nullptr);
      _impl_.system_status_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.progress_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.progress_));
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string chassis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chassis_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "StatusPacket.chassis_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .StatusPacket.EnumStatusType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::StatusPacket_EnumStatusType_IsValid(val))) {
            _internal_set_type(static_cast<::StatusPacket_EnumStatusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 num_sensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_sensors(&has_bits);
          _impl_.num_sensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SensorStatus sensor_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "StatusPacket.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string progress_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_progress_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "StatusPacket.progress_msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .SensorConfig sensor_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .StatusPacket.EnumSystemStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::StatusPacket_EnumSystemStatus_IsValid(val))) {
            _internal_set_status(static_cast<::StatusPacket_EnumSystemStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .SensorLed sensor_led = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_led(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SensorState sensor_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SensorField sensor_field = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ChassisStatus chassis_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SystemStatusMessage system_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string chassis_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chassis_name().data(), static_cast<int>(this->_internal_chassis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "StatusPacket.chassis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chassis_name(), target);
  }

  // required .StatusPacket.EnumStatusType type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // required uint32 num_sensors = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_sensors(), target);
  }

  // repeated .SensorStatus sensor_status = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required string version = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "StatusPacket.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress(), target);
  }

  // optional string progress_msg = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_progress_msg().data(), static_cast<int>(this->_internal_progress_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "StatusPacket.progress_msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_progress_msg(), target);
  }

  // repeated .SensorConfig sensor_config = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .StatusPacket.EnumSystemStatus status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // repeated .SensorLed sensor_led = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_led_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_led(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SensorState sensor_state = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SensorField sensor_field = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .ChassisStatus chassis_status = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::chassis_status(this),
        _Internal::chassis_status(this).GetCachedSize(), target, stream);
  }

  // optional .SystemStatusMessage system_status = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::system_status(this),
        _Internal::system_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusPacket)
  return target;
}

size_t StatusPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StatusPacket)
  size_t total_size = 0;

  if (_internal_has_chassis_name()) {
    // required string chassis_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chassis_name());
  }

  if (_internal_has_version()) {
    // required string version = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (_internal_has_type()) {
    // required .StatusPacket.EnumStatusType type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_num_sensors()) {
    // required uint32 num_sensors = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_sensors());
  }

  if (_internal_has_status()) {
    // required .StatusPacket.EnumSystemStatus status = 9;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return total_size;
}
size_t StatusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusPacket)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000163) ^ 0x00000163) == 0) {  // All required fields are present.
    // required string chassis_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chassis_name());

    // required string version = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

    // required .StatusPacket.EnumStatusType type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 num_sensors = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_sensors());

    // required .StatusPacket.EnumSystemStatus status = 9;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SensorStatus sensor_status = 4;
  total_size += 1UL * this->_internal_sensor_status_size();
  for (const auto& msg : this->_impl_.sensor_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SensorConfig sensor_config = 8;
  total_size += 1UL * this->_internal_sensor_config_size();
  for (const auto& msg : this->_impl_.sensor_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SensorLed sensor_led = 10;
  total_size += 1UL * this->_internal_sensor_led_size();
  for (const auto& msg : this->_impl_.sensor_led_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SensorState sensor_state = 11;
  total_size += 1UL * this->_internal_sensor_state_size();
  for (const auto& msg : this->_impl_.sensor_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SensorField sensor_field = 12;
  total_size += 1UL * this->_internal_sensor_field_size();
  for (const auto& msg : this->_impl_.sensor_field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional string progress_msg = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_progress_msg());
    }

    // optional .ChassisStatus chassis_status = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chassis_status_);
    }

    // optional .SystemStatusMessage system_status = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_status_);
    }

  }
  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusPacket::GetClassData() const { return &_class_data_; }


void StatusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusPacket*>(&to_msg);
  auto& from = static_cast<const StatusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StatusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensor_status_.MergeFrom(from._impl_.sensor_status_);
  _this->_impl_.sensor_config_.MergeFrom(from._impl_.sensor_config_);
  _this->_impl_.sensor_led_.MergeFrom(from._impl_.sensor_led_);
  _this->_impl_.sensor_state_.MergeFrom(from._impl_.sensor_state_);
  _this->_impl_.sensor_field_.MergeFrom(from._impl_.sensor_field_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chassis_name(from._internal_chassis_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_progress_msg(from._internal_progress_msg());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_chassis_status()->::ChassisStatus::MergeFrom(
          from._internal_chassis_status());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_system_status()->::SystemStatusMessage::MergeFrom(
          from._internal_system_status());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.num_sensors_ = from._impl_.num_sensors_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusPacket::CopyFrom(const StatusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sensor_status_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sensor_config_))
    return false;
  return true;
}

void StatusPacket::InternalSwap(StatusPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sensor_status_.InternalSwap(&other->_impl_.sensor_status_);
  _impl_.sensor_config_.InternalSwap(&other->_impl_.sensor_config_);
  _impl_.sensor_led_.InternalSwap(&other->_impl_.sensor_led_);
  _impl_.sensor_state_.InternalSwap(&other->_impl_.sensor_state_);
  _impl_.sensor_field_.InternalSwap(&other->_impl_.sensor_field_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chassis_name_, lhs_arena,
      &other->_impl_.chassis_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.progress_msg_, lhs_arena,
      &other->_impl_.progress_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusPacket, _impl_.status_)
      + sizeof(StatusPacket::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StatusPacket, _impl_.chassis_status_)>(
          reinterpret_cast<char*>(&_impl_.chassis_status_),
          reinterpret_cast<char*>(&other->_impl_.chassis_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2dprotocol_2eproto_getter, &descriptor_table_net_2dprotocol_2eproto_once,
      file_level_metadata_net_2dprotocol_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DataFrame*
Arena::CreateMaybeMessage< ::DataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::DataPacket*
Arena::CreateMaybeMessage< ::DataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RawCommand*
Arena::CreateMaybeMessage< ::RawCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RawCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::DevModeValidation*
Arena::CreateMaybeMessage< ::DevModeValidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DevModeValidation >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigMessage*
Arena::CreateMaybeMessage< ::ConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMessage*
Arena::CreateMaybeMessage< ::LogicMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicInterruptMessage*
Arena::CreateMaybeMessage< ::LogicInterruptMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicInterruptMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::WaveMessage*
Arena::CreateMaybeMessage< ::WaveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WaveMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CmdPacket*
Arena::CreateMaybeMessage< ::CmdPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CmdPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorStatus*
Arena::CreateMaybeMessage< ::SensorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorState*
Arena::CreateMaybeMessage< ::SensorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorState >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorConfig*
Arena::CreateMaybeMessage< ::SensorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorLed*
Arena::CreateMaybeMessage< ::SensorLed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorLed >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorField*
Arena::CreateMaybeMessage< ::SensorField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorField >(arena);
}
template<> PROTOBUF_NOINLINE ::ChassisStatus*
Arena::CreateMaybeMessage< ::ChassisStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChassisStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::SystemStatusMessage*
Arena::CreateMaybeMessage< ::SystemStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SystemStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusPacket*
Arena::CreateMaybeMessage< ::StatusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
